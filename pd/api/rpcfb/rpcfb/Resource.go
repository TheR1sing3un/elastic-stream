// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ResourceT struct {
	Type ResourceType `json:"type"`
	RangeServer *RangeServerT `json:"range_server"`
	Stream *StreamT `json:"stream"`
	Range *RangeT `json:"range"`
	Object *ObjT `json:"object"`
}

func (t *ResourceT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	rangeServerOffset := t.RangeServer.Pack(builder)
	streamOffset := t.Stream.Pack(builder)
	range_Offset := t.Range.Pack(builder)
	objectOffset := t.Object.Pack(builder)
	ResourceStart(builder)
	ResourceAddType(builder, t.Type)
	ResourceAddRangeServer(builder, rangeServerOffset)
	ResourceAddStream(builder, streamOffset)
	ResourceAddRange(builder, range_Offset)
	ResourceAddObject(builder, objectOffset)
	return ResourceEnd(builder)
}

func (rcv *Resource) UnPackTo(t *ResourceT) {
	t.Type = rcv.Type()
	t.RangeServer = rcv.RangeServer(nil).UnPack()
	t.Stream = rcv.Stream(nil).UnPack()
	t.Range = rcv.Range(nil).UnPack()
	t.Object = rcv.Object(nil).UnPack()
}

func (rcv *Resource) UnPack() *ResourceT {
	if rcv == nil { return nil }
	t := &ResourceT{}
	rcv.UnPackTo(t)
	return t
}

type Resource struct {
	_tab flatbuffers.Table
}

func GetRootAsResource(buf []byte, offset flatbuffers.UOffsetT) *Resource {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Resource{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsResource(buf []byte, offset flatbuffers.UOffsetT) *Resource {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Resource{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Resource) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Resource) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Resource) Type() ResourceType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ResourceType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Resource) MutateType(n ResourceType) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *Resource) RangeServer(obj *RangeServer) *RangeServer {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RangeServer)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Resource) Stream(obj *Stream) *Stream {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Stream)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Resource) Range(obj *Range) *Range {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Range)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Resource) Object(obj *Obj) *Obj {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Obj)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func ResourceStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func ResourceAddType(builder *flatbuffers.Builder, type_ ResourceType) {
	builder.PrependInt8Slot(0, int8(type_), 0)
}
func ResourceAddRangeServer(builder *flatbuffers.Builder, rangeServer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(rangeServer), 0)
}
func ResourceAddStream(builder *flatbuffers.Builder, stream flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(stream), 0)
}
func ResourceAddRange(builder *flatbuffers.Builder, range_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(range_), 0)
}
func ResourceAddObject(builder *flatbuffers.Builder, object flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(object), 0)
}
func ResourceEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

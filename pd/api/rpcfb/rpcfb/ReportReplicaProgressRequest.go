// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ReportReplicaProgressRequestT struct {
	TimeoutMs int32 `json:"timeout_ms"`
	RangeServer *RangeServerT `json:"range_server"`
	ReplicaProgress []*ReplicaProgressT `json:"replica_progress"`
}

func (t *ReportReplicaProgressRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	rangeServerOffset := t.RangeServer.Pack(builder)
	replicaProgressOffset := flatbuffers.UOffsetT(0)
	if t.ReplicaProgress != nil {
		replicaProgressLength := len(t.ReplicaProgress)
		replicaProgressOffsets := make([]flatbuffers.UOffsetT, replicaProgressLength)
		for j := 0; j < replicaProgressLength; j++ {
			replicaProgressOffsets[j] = t.ReplicaProgress[j].Pack(builder)
		}
		ReportReplicaProgressRequestStartReplicaProgressVector(builder, replicaProgressLength)
		for j := replicaProgressLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(replicaProgressOffsets[j])
		}
		replicaProgressOffset = builder.EndVector(replicaProgressLength)
	}
	ReportReplicaProgressRequestStart(builder)
	ReportReplicaProgressRequestAddTimeoutMs(builder, t.TimeoutMs)
	ReportReplicaProgressRequestAddRangeServer(builder, rangeServerOffset)
	ReportReplicaProgressRequestAddReplicaProgress(builder, replicaProgressOffset)
	return ReportReplicaProgressRequestEnd(builder)
}

func (rcv *ReportReplicaProgressRequest) UnPackTo(t *ReportReplicaProgressRequestT) {
	t.TimeoutMs = rcv.TimeoutMs()
	t.RangeServer = rcv.RangeServer(nil).UnPack()
	replicaProgressLength := rcv.ReplicaProgressLength()
	t.ReplicaProgress = make([]*ReplicaProgressT, replicaProgressLength)
	for j := 0; j < replicaProgressLength; j++ {
		x := ReplicaProgress{}
		rcv.ReplicaProgress(&x, j)
		t.ReplicaProgress[j] = x.UnPack()
	}
}

func (rcv *ReportReplicaProgressRequest) UnPack() *ReportReplicaProgressRequestT {
	if rcv == nil { return nil }
	t := &ReportReplicaProgressRequestT{}
	rcv.UnPackTo(t)
	return t
}

type ReportReplicaProgressRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsReportReplicaProgressRequest(buf []byte, offset flatbuffers.UOffsetT) *ReportReplicaProgressRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ReportReplicaProgressRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsReportReplicaProgressRequest(buf []byte, offset flatbuffers.UOffsetT) *ReportReplicaProgressRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ReportReplicaProgressRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ReportReplicaProgressRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ReportReplicaProgressRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ReportReplicaProgressRequest) TimeoutMs() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ReportReplicaProgressRequest) MutateTimeoutMs(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *ReportReplicaProgressRequest) RangeServer(obj *RangeServer) *RangeServer {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RangeServer)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ReportReplicaProgressRequest) ReplicaProgress(obj *ReplicaProgress, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ReportReplicaProgressRequest) ReplicaProgressLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ReportReplicaProgressRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ReportReplicaProgressRequestAddTimeoutMs(builder *flatbuffers.Builder, timeoutMs int32) {
	builder.PrependInt32Slot(0, timeoutMs, 0)
}
func ReportReplicaProgressRequestAddRangeServer(builder *flatbuffers.Builder, rangeServer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(rangeServer), 0)
}
func ReportReplicaProgressRequestAddReplicaProgress(builder *flatbuffers.Builder, replicaProgress flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(replicaProgress), 0)
}
func ReportReplicaProgressRequestStartReplicaProgressVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ReportReplicaProgressRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
